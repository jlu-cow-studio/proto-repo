// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: data_collector.proto

package data_collector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataCollectorServiceClient is the client API for DataCollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataCollectorServiceClient interface {
	//埋点上报
	TrackingReport(ctx context.Context, in *TrackingReportReq, opts ...grpc.CallOption) (*TrackingReportRes, error)
	//浏览时长上报
	ViewingDuration(ctx context.Context, in *ViewingDurationReq, opts ...grpc.CallOption) (*ViewingDurationRes, error)
}

type dataCollectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCollectorServiceClient(cc grpc.ClientConnInterface) DataCollectorServiceClient {
	return &dataCollectorServiceClient{cc}
}

func (c *dataCollectorServiceClient) TrackingReport(ctx context.Context, in *TrackingReportReq, opts ...grpc.CallOption) (*TrackingReportRes, error) {
	out := new(TrackingReportRes)
	err := c.cc.Invoke(ctx, "/jlu_cow_studio.data_collector.DataCollectorService/TrackingReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCollectorServiceClient) ViewingDuration(ctx context.Context, in *ViewingDurationReq, opts ...grpc.CallOption) (*ViewingDurationRes, error) {
	out := new(ViewingDurationRes)
	err := c.cc.Invoke(ctx, "/jlu_cow_studio.data_collector.DataCollectorService/ViewingDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCollectorServiceServer is the server API for DataCollectorService service.
// All implementations must embed UnimplementedDataCollectorServiceServer
// for forward compatibility
type DataCollectorServiceServer interface {
	//埋点上报
	TrackingReport(context.Context, *TrackingReportReq) (*TrackingReportRes, error)
	//浏览时长上报
	ViewingDuration(context.Context, *ViewingDurationReq) (*ViewingDurationRes, error)
	mustEmbedUnimplementedDataCollectorServiceServer()
}

// UnimplementedDataCollectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataCollectorServiceServer struct {
}

func (UnimplementedDataCollectorServiceServer) TrackingReport(context.Context, *TrackingReportReq) (*TrackingReportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackingReport not implemented")
}
func (UnimplementedDataCollectorServiceServer) ViewingDuration(context.Context, *ViewingDurationReq) (*ViewingDurationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewingDuration not implemented")
}
func (UnimplementedDataCollectorServiceServer) mustEmbedUnimplementedDataCollectorServiceServer() {}

// UnsafeDataCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataCollectorServiceServer will
// result in compilation errors.
type UnsafeDataCollectorServiceServer interface {
	mustEmbedUnimplementedDataCollectorServiceServer()
}

func RegisterDataCollectorServiceServer(s grpc.ServiceRegistrar, srv DataCollectorServiceServer) {
	s.RegisterService(&DataCollectorService_ServiceDesc, srv)
}

func _DataCollectorService_TrackingReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackingReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectorServiceServer).TrackingReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jlu_cow_studio.data_collector.DataCollectorService/TrackingReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectorServiceServer).TrackingReport(ctx, req.(*TrackingReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCollectorService_ViewingDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewingDurationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectorServiceServer).ViewingDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jlu_cow_studio.data_collector.DataCollectorService/ViewingDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectorServiceServer).ViewingDuration(ctx, req.(*ViewingDurationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DataCollectorService_ServiceDesc is the grpc.ServiceDesc for DataCollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataCollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jlu_cow_studio.data_collector.DataCollectorService",
	HandlerType: (*DataCollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackingReport",
			Handler:    _DataCollectorService_TrackingReport_Handler,
		},
		{
			MethodName: "ViewingDuration",
			Handler:    _DataCollectorService_ViewingDuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_collector.proto",
}
