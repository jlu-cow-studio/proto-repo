// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pack.proto

package pack

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackServiceClient is the client API for PackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackServiceClient interface {
	// 用户登录方法
	PackItems(ctx context.Context, in *PackItemsReq, opts ...grpc.CallOption) (*PackItemsRes, error)
}

type packServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackServiceClient(cc grpc.ClientConnInterface) PackServiceClient {
	return &packServiceClient{cc}
}

func (c *packServiceClient) PackItems(ctx context.Context, in *PackItemsReq, opts ...grpc.CallOption) (*PackItemsRes, error) {
	out := new(PackItemsRes)
	err := c.cc.Invoke(ctx, "/jlu_cow_studio.pack.PackService/PackItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackServiceServer is the server API for PackService service.
// All implementations must embed UnimplementedPackServiceServer
// for forward compatibility
type PackServiceServer interface {
	// 用户登录方法
	PackItems(context.Context, *PackItemsReq) (*PackItemsRes, error)
	mustEmbedUnimplementedPackServiceServer()
}

// UnimplementedPackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackServiceServer struct {
}

func (UnimplementedPackServiceServer) PackItems(context.Context, *PackItemsReq) (*PackItemsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PackItems not implemented")
}
func (UnimplementedPackServiceServer) mustEmbedUnimplementedPackServiceServer() {}

// UnsafePackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackServiceServer will
// result in compilation errors.
type UnsafePackServiceServer interface {
	mustEmbedUnimplementedPackServiceServer()
}

func RegisterPackServiceServer(s grpc.ServiceRegistrar, srv PackServiceServer) {
	s.RegisterService(&PackService_ServiceDesc, srv)
}

func _PackService_PackItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackServiceServer).PackItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jlu_cow_studio.pack.PackService/PackItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackServiceServer).PackItems(ctx, req.(*PackItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PackService_ServiceDesc is the grpc.ServiceDesc for PackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jlu_cow_studio.pack.PackService",
	HandlerType: (*PackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PackItems",
			Handler:    _PackService_PackItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pack.proto",
}
