// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: tag_core.proto

package tag_core

import (
	base "github.com/jlu-cow-studio/common/dal/rpc/base"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Weight     float64 `protobuf:"fixed64,3,opt,name=weight,proto3" json:"weight,omitempty"`
	MarkObject string  `protobuf:"bytes,4,opt,name=mark_object,json=markObject,proto3" json:"mark_object,omitempty"`
	CategoryId int64   `protobuf:"varint,5,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{0}
}

func (x *Tag) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Tag) GetMarkObject() string {
	if x != nil {
		return x.MarkObject
	}
	return ""
}

func (x *Tag) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type TagWithCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Weight     float64      `protobuf:"fixed64,3,opt,name=weight,proto3" json:"weight,omitempty"`
	MarkObject string       `protobuf:"bytes,4,opt,name=mark_object,json=markObject,proto3" json:"mark_object,omitempty"`
	CategoryId int64        `protobuf:"varint,5,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Category   *TagCategory `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *TagWithCategory) Reset() {
	*x = TagWithCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagWithCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagWithCategory) ProtoMessage() {}

func (x *TagWithCategory) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagWithCategory.ProtoReflect.Descriptor instead.
func (*TagWithCategory) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{1}
}

func (x *TagWithCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TagWithCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagWithCategory) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *TagWithCategory) GetMarkObject() string {
	if x != nil {
		return x.MarkObject
	}
	return ""
}

func (x *TagWithCategory) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *TagWithCategory) GetCategory() *TagCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

type TagCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentId int32  `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Level    int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *TagCategory) Reset() {
	*x = TagCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagCategory) ProtoMessage() {}

func (x *TagCategory) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagCategory.ProtoReflect.Descriptor instead.
func (*TagCategory) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{2}
}

func (x *TagCategory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TagCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagCategory) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *TagCategory) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type TagCategoryWithList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category *TagCategory `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	TagList  []*Tag       `protobuf:"bytes,2,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
}

func (x *TagCategoryWithList) Reset() {
	*x = TagCategoryWithList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagCategoryWithList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagCategoryWithList) ProtoMessage() {}

func (x *TagCategoryWithList) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagCategoryWithList.ProtoReflect.Descriptor instead.
func (*TagCategoryWithList) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{3}
}

func (x *TagCategoryWithList) GetCategory() *TagCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *TagCategoryWithList) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

type GetTagListBySceneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *base.BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Scene string        `protobuf:"bytes,2,opt,name=scene,proto3" json:"scene,omitempty"`
}

func (x *GetTagListBySceneRequest) Reset() {
	*x = GetTagListBySceneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagListBySceneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagListBySceneRequest) ProtoMessage() {}

func (x *GetTagListBySceneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagListBySceneRequest.ProtoReflect.Descriptor instead.
func (*GetTagListBySceneRequest) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{4}
}

func (x *GetTagListBySceneRequest) GetBase() *base.BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetTagListBySceneRequest) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

type GetTagListBySceneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *base.BaseRes          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	List []*TagCategoryWithList `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetTagListBySceneResponse) Reset() {
	*x = GetTagListBySceneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagListBySceneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagListBySceneResponse) ProtoMessage() {}

func (x *GetTagListBySceneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagListBySceneResponse.ProtoReflect.Descriptor instead.
func (*GetTagListBySceneResponse) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{5}
}

func (x *GetTagListBySceneResponse) GetBase() *base.BaseRes {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetTagListBySceneResponse) GetList() []*TagCategoryWithList {
	if x != nil {
		return x.List
	}
	return nil
}

type GetTagListByItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *base.BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ItemId string        `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *GetTagListByItemRequest) Reset() {
	*x = GetTagListByItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagListByItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagListByItemRequest) ProtoMessage() {}

func (x *GetTagListByItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagListByItemRequest.ProtoReflect.Descriptor instead.
func (*GetTagListByItemRequest) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{6}
}

func (x *GetTagListByItemRequest) GetBase() *base.BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetTagListByItemRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type GetTagListByItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	TagList []*Tag        `protobuf:"bytes,2,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
}

func (x *GetTagListByItemResponse) Reset() {
	*x = GetTagListByItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagListByItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagListByItemResponse) ProtoMessage() {}

func (x *GetTagListByItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagListByItemResponse.ProtoReflect.Descriptor instead.
func (*GetTagListByItemResponse) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{7}
}

func (x *GetTagListByItemResponse) GetBase() *base.BaseRes {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetTagListByItemResponse) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

type GetTagListByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *base.BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserId string        `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetTagListByUserRequest) Reset() {
	*x = GetTagListByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagListByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagListByUserRequest) ProtoMessage() {}

func (x *GetTagListByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagListByUserRequest.ProtoReflect.Descriptor instead.
func (*GetTagListByUserRequest) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{8}
}

func (x *GetTagListByUserRequest) GetBase() *base.BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetTagListByUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetTagListByUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	TagList []*Tag        `protobuf:"bytes,2,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
}

func (x *GetTagListByUserResponse) Reset() {
	*x = GetTagListByUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagListByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagListByUserResponse) ProtoMessage() {}

func (x *GetTagListByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagListByUserResponse.ProtoReflect.Descriptor instead.
func (*GetTagListByUserResponse) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{9}
}

func (x *GetTagListByUserResponse) GetBase() *base.BaseRes {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetTagListByUserResponse) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

type UpdateItemTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *base.BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ItemId  string        `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TagList []string      `protobuf:"bytes,3,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
}

func (x *UpdateItemTagsRequest) Reset() {
	*x = UpdateItemTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemTagsRequest) ProtoMessage() {}

func (x *UpdateItemTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateItemTagsRequest) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateItemTagsRequest) GetBase() *base.BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateItemTagsRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *UpdateItemTagsRequest) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

type UpdateItemTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *UpdateItemTagsResponse) Reset() {
	*x = UpdateItemTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemTagsResponse) ProtoMessage() {}

func (x *UpdateItemTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemTagsResponse.ProtoReflect.Descriptor instead.
func (*UpdateItemTagsResponse) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateItemTagsResponse) GetBase() *base.BaseRes {
	if x != nil {
		return x.Base
	}
	return nil
}

type UpdateUserTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *base.BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserId  string        `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TagList []string      `protobuf:"bytes,3,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
}

func (x *UpdateUserTagsRequest) Reset() {
	*x = UpdateUserTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTagsRequest) ProtoMessage() {}

func (x *UpdateUserTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserTagsRequest) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserTagsRequest) GetBase() *base.BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateUserTagsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserTagsRequest) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

type UpdateUserTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *UpdateUserTagsResponse) Reset() {
	*x = UpdateUserTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tag_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTagsResponse) ProtoMessage() {}

func (x *UpdateUserTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tag_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTagsResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserTagsResponse) Descriptor() ([]byte, []int) {
	return file_tag_core_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateUserTagsResponse) GetBase() *base.BaseRes {
	if x != nil {
		return x.Base
	}
	return nil
}

var File_tag_core_proto protoreflect.FileDescriptor

var file_tag_core_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x0f,
	0x54, 0x61, 0x67, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0x64, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x37, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6a, 0x6c, 0x75,
	0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x64,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f,
	0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a,
	0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a,
	0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x32, 0xe4, 0x04, 0x0a, 0x0e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x31, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6a, 0x6c,
	0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x30, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x6a,
	0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61,
	0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x71, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6a, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x6c, 0x75, 0x2d, 0x63, 0x6f, 0x77, 0x2d, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x6c, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tag_core_proto_rawDescOnce sync.Once
	file_tag_core_proto_rawDescData = file_tag_core_proto_rawDesc
)

func file_tag_core_proto_rawDescGZIP() []byte {
	file_tag_core_proto_rawDescOnce.Do(func() {
		file_tag_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_tag_core_proto_rawDescData)
	})
	return file_tag_core_proto_rawDescData
}

var file_tag_core_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_tag_core_proto_goTypes = []interface{}{
	(*Tag)(nil),                       // 0: jlu_cow_studio.tag_core.Tag
	(*TagWithCategory)(nil),           // 1: jlu_cow_studio.tag_core.TagWithCategory
	(*TagCategory)(nil),               // 2: jlu_cow_studio.tag_core.TagCategory
	(*TagCategoryWithList)(nil),       // 3: jlu_cow_studio.tag_core.TagCategoryWithList
	(*GetTagListBySceneRequest)(nil),  // 4: jlu_cow_studio.tag_core.GetTagListBySceneRequest
	(*GetTagListBySceneResponse)(nil), // 5: jlu_cow_studio.tag_core.GetTagListBySceneResponse
	(*GetTagListByItemRequest)(nil),   // 6: jlu_cow_studio.tag_core.GetTagListByItemRequest
	(*GetTagListByItemResponse)(nil),  // 7: jlu_cow_studio.tag_core.GetTagListByItemResponse
	(*GetTagListByUserRequest)(nil),   // 8: jlu_cow_studio.tag_core.GetTagListByUserRequest
	(*GetTagListByUserResponse)(nil),  // 9: jlu_cow_studio.tag_core.GetTagListByUserResponse
	(*UpdateItemTagsRequest)(nil),     // 10: jlu_cow_studio.tag_core.UpdateItemTagsRequest
	(*UpdateItemTagsResponse)(nil),    // 11: jlu_cow_studio.tag_core.UpdateItemTagsResponse
	(*UpdateUserTagsRequest)(nil),     // 12: jlu_cow_studio.tag_core.UpdateUserTagsRequest
	(*UpdateUserTagsResponse)(nil),    // 13: jlu_cow_studio.tag_core.UpdateUserTagsResponse
	(*base.BaseReq)(nil),              // 14: jlu_cow_studio.base.BaseReq
	(*base.BaseRes)(nil),              // 15: jlu_cow_studio.base.BaseRes
}
var file_tag_core_proto_depIdxs = []int32{
	2,  // 0: jlu_cow_studio.tag_core.TagWithCategory.category:type_name -> jlu_cow_studio.tag_core.TagCategory
	2,  // 1: jlu_cow_studio.tag_core.TagCategoryWithList.category:type_name -> jlu_cow_studio.tag_core.TagCategory
	0,  // 2: jlu_cow_studio.tag_core.TagCategoryWithList.tag_list:type_name -> jlu_cow_studio.tag_core.Tag
	14, // 3: jlu_cow_studio.tag_core.GetTagListBySceneRequest.base:type_name -> jlu_cow_studio.base.BaseReq
	15, // 4: jlu_cow_studio.tag_core.GetTagListBySceneResponse.base:type_name -> jlu_cow_studio.base.BaseRes
	3,  // 5: jlu_cow_studio.tag_core.GetTagListBySceneResponse.list:type_name -> jlu_cow_studio.tag_core.TagCategoryWithList
	14, // 6: jlu_cow_studio.tag_core.GetTagListByItemRequest.base:type_name -> jlu_cow_studio.base.BaseReq
	15, // 7: jlu_cow_studio.tag_core.GetTagListByItemResponse.base:type_name -> jlu_cow_studio.base.BaseRes
	0,  // 8: jlu_cow_studio.tag_core.GetTagListByItemResponse.tag_list:type_name -> jlu_cow_studio.tag_core.Tag
	14, // 9: jlu_cow_studio.tag_core.GetTagListByUserRequest.base:type_name -> jlu_cow_studio.base.BaseReq
	15, // 10: jlu_cow_studio.tag_core.GetTagListByUserResponse.base:type_name -> jlu_cow_studio.base.BaseRes
	0,  // 11: jlu_cow_studio.tag_core.GetTagListByUserResponse.tag_list:type_name -> jlu_cow_studio.tag_core.Tag
	14, // 12: jlu_cow_studio.tag_core.UpdateItemTagsRequest.base:type_name -> jlu_cow_studio.base.BaseReq
	15, // 13: jlu_cow_studio.tag_core.UpdateItemTagsResponse.base:type_name -> jlu_cow_studio.base.BaseRes
	14, // 14: jlu_cow_studio.tag_core.UpdateUserTagsRequest.base:type_name -> jlu_cow_studio.base.BaseReq
	15, // 15: jlu_cow_studio.tag_core.UpdateUserTagsResponse.base:type_name -> jlu_cow_studio.base.BaseRes
	4,  // 16: jlu_cow_studio.tag_core.TagCoreService.GetTagListByScene:input_type -> jlu_cow_studio.tag_core.GetTagListBySceneRequest
	6,  // 17: jlu_cow_studio.tag_core.TagCoreService.GetTagListByItem:input_type -> jlu_cow_studio.tag_core.GetTagListByItemRequest
	8,  // 18: jlu_cow_studio.tag_core.TagCoreService.GetTagListByUser:input_type -> jlu_cow_studio.tag_core.GetTagListByUserRequest
	10, // 19: jlu_cow_studio.tag_core.TagCoreService.UpdateItemTags:input_type -> jlu_cow_studio.tag_core.UpdateItemTagsRequest
	12, // 20: jlu_cow_studio.tag_core.TagCoreService.UpdateUserTags:input_type -> jlu_cow_studio.tag_core.UpdateUserTagsRequest
	5,  // 21: jlu_cow_studio.tag_core.TagCoreService.GetTagListByScene:output_type -> jlu_cow_studio.tag_core.GetTagListBySceneResponse
	7,  // 22: jlu_cow_studio.tag_core.TagCoreService.GetTagListByItem:output_type -> jlu_cow_studio.tag_core.GetTagListByItemResponse
	9,  // 23: jlu_cow_studio.tag_core.TagCoreService.GetTagListByUser:output_type -> jlu_cow_studio.tag_core.GetTagListByUserResponse
	11, // 24: jlu_cow_studio.tag_core.TagCoreService.UpdateItemTags:output_type -> jlu_cow_studio.tag_core.UpdateItemTagsResponse
	13, // 25: jlu_cow_studio.tag_core.TagCoreService.UpdateUserTags:output_type -> jlu_cow_studio.tag_core.UpdateUserTagsResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_tag_core_proto_init() }
func file_tag_core_proto_init() {
	if File_tag_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tag_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagWithCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagCategoryWithList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagListBySceneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagListBySceneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagListByItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagListByItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagListByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagListByUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tag_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tag_core_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tag_core_proto_goTypes,
		DependencyIndexes: file_tag_core_proto_depIdxs,
		MessageInfos:      file_tag_core_proto_msgTypes,
	}.Build()
	File_tag_core_proto = out.File
	file_tag_core_proto_rawDesc = nil
	file_tag_core_proto_goTypes = nil
	file_tag_core_proto_depIdxs = nil
}
